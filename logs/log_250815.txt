프로젝트 : 영업관리용 DB 파이프라인 설계 및 구현

# Overview
- feat/queries 브랜치에서 db_queries.py 대규모 확장 완료
- 11개의 새로운 read 전용 query 함수 구현
- main.py UI 확장으로 사용자 친화적 메뉴 시스템 구축
- 함수 무결성 검사 및 검증 완료

# 주요 변경사항

## 1. db_queries.py 대규모 확장
### 기존 함수 개선
- `get_all_companies_summary()`: 담당자수/Task수 → 매출/진행중Task수/프로젝트수로 변경
- `get_incomplete_tasks()`: 문자열 기반 → 정수형 task_status 기준으로 변경

### 신규 함수 추가 (8개)
**회사 관련 조회**
- `get_contacts_by_company_name()`: 회사별 담당자 목록 (JOIN 활용)
- `get_projects_by_company_name()`: 회사별 프로젝트 목록

**상세 정보 조회** 
- `get_project_details_with_participants()`: 프로젝트 상세 + 참여자 목록
- `get_invoice_details_with_items()`: 인보이스 상세 + 항목 목록

**Task 검색 및 필터링**
- `get_tasks_by_date_range()`: 기간별 Task 조회 (BETWEEN 절)
- `get_tasks_by_user()`: 사용자별 Task 조회
- `search_contacts()`: 담당자 검색 (LIKE 연산자 활용)

## 2. main.py UI 시스템 확장
### 메인 메뉴 확장 (4개 → 8개)
- 기존: 회사목록, Task목록, Task추가, 엑셀내보내기
- 추가: 회사별상세조회, 프로젝트관리, 인보이스조회, Task검색, 담당자검색

### 서브 메뉴 시스템 구현
- `company_detail_menu()`: 회사별 담당자/Task/프로젝트 조회
- `project_menu()`: 프로젝트 목록 및 상세 정보
- `invoice_menu()`: 인보이스 목록 및 상세 정보  
- `task_search_menu()`: 기간별/사용자별/미완료 Task 필터링
- `contact_search_menu()`: 담당자 검색 및 전체 목록

## 3. 데이터베이스 쿼리 최적화
### JOIN 패턴 표준화
- Users, Companies, Contacts 테이블 간 효율적 JOIN
- LEFT JOIN으로 NULL 허용 관계 처리
- ID 대신 실제 이름/데이터 표시

### 성능 최적화
- 서브쿼리를 활용한 집계 연산 (매출, 카운트)
- 적절한 ORDER BY로 사용자 친화적 정렬
- 매개변수화된 쿼리로 SQL 인젝션 방지

## 4. 코드 품질 및 안전성
### 트랜잭션 안전성
- 모든 함수에서 try-finally 패턴 적용
- 연결 해제 보장으로 리소스 누수 방지

### 타입 안전성
- 모든 함수에 타입 힌트 적용
- 명확한 반환 타입 명시 (list, dict)

### 문서화
- 각 함수별 상세한 docstring 작성
- 매개변수 및 반환값 설명 포함

## 5. 테스트 및 검증
### 무결성 검사 시스템 구축
- `test_queries.py` 스크립트 작성
- 11개 함수 존재 여부 및 호출 가능성 검증
- 함수 시그니처 자동 검사
- SQL 구문 정적 분석 (12개 쿼리 검증)

### 검증 결과
- ✅ 모든 함수 정상 정의 및 호출 가능
- ✅ 모든 SQL 구문 기본 문법 확인
- ✅ 타입 힌트 일관성 검증 완료

## 6. 아키텍처 개선사항
### 모듈 분리 철학
- db_operations.py: CRUD (Create, Update, Delete)
- db_queries.py: Read 전용 복잡한 조회
- 역할 분담으로 코드 가독성 및 유지보수성 향상

### 확장성 고려
- 새로운 query 함수 추가 용이한 구조
- 일관된 코딩 패턴으로 개발 속도 향상
- 메뉴 시스템 확장 가능한 설계

# 함수 분류별 요약

| **분류** | **함수 개수** | **주요 기능** |
|---------|-------------|-------------|
| **회사 중심 조회** | 4개 | 회사별 Task/담당자/프로젝트/요약통계 |
| **프로젝트 관리** | 1개 | 프로젝트 상세정보 + 참여자 |
| **인보이스 관리** | 1개 | 인보이스 상세정보 + 항목 |
| **Task 필터링** | 3개 | 기간별/사용자별/미완료 Task |
| **검색 기능** | 1개 | 담당자 다중 필드 검색 |
| **유틸리티** | 1개 | 테이블 전체 조회 |
| **총계** | **11개** | **완전한 Read 시스템 구축** |

# 개발 노트
- 모든 query 함수는 dict_factory를 사용하여 사용자 친화적 결과 반환
- JOIN을 적극 활용하여 관계형 데이터의 장점 극대화
- 스키마 변화에 유연하게 대응할 수 있는 쿼리 구조 설계
- 한국어 UI로 사용자 경험 최적화

# 최종 상태
- **현재 브랜치**: feat/queries
- **구현 완료**: db_queries.py 확장 + main.py UI 시스템
- **테스트 상태**: 모든 함수 무결성 검증 완료
- **준비 완료**: commit 및 원격 저장소 업로드 대기
- **다음 단계**: 추가 query 함수 개발 또는 다른 브랜치 작업